@login_required
def updatesurvey(request, id):
    venue = AusstiegAmb.objects.get(pk=id)
    form = CreateAusstiegAbmulanz(request.POST or None, instance=venue)
    if form.is_valid():
        form.save(user=request.user, update_fields= ['name', 'schriftlichepruefung', 'muendlichepruefung', 'akten_abgegeben', 'therapeutenornder_fertiggestellt',
        'vorname','festplatte_abgegeben','schluessel_abgegeben','schließfach_geprueft','tuerchip_abgegeben',
        'tuerschild_abgegeben','namensschild_abgegeben','versicherung_abgemeldet','fachkonverenz_ausgetragen',
        'email_verteilerlisten_entfernt','dauerbuchung_geloescht','Staatspruefungstermine_eingetragen','Fiona_auf_beendet',
        'festplatte_geloescht','pc_account_deaktiviert','pia_zugang_deaktiviert','email_gelöscht'])
        return redirect('home')
    context = {'venue': venue, 'form': form}
    return render(request, 'main/updatesurvey.html', context)


@login_required
def updatesurvey(request, id):
    instance = Testdb.objects.get(pk=id)
    form = Testdbform(request.POST or None, instance=instance)
    if form.is_valid():
        form.save(user=request.user, update_fields= ['name','vorname'])
        return redirect('home')
    context = {'venue': instance, 'form': form}
    return render(request, 'main/updatesurvey.html', context)


def save(self,*args, **kwargs):

    post = AusstiegAmb.objects.update_or_create(
        user = kwargs.pop('user'),
        vorname = self.cleaned_data['vorname'],
        name = self.cleaned_data['name'],
        schriftlichepruefung = self.cleaned_data['schriftlichepruefung'],
        muendlichepruefung = self.cleaned_data['muendlichepruefung'],
        akten_abgegeben = self.cleaned_data['akten_abgegeben'],
        therapeutenornder_fertiggestellt = self.cleaned_data['therapeutenornder_fertiggestellt'],
        festplatte_abgegeben = self.cleaned_data['festplatte_abgegeben'],
        schluessel_abgegeben = self.cleaned_data['schluessel_abgegeben'],
        schließfach_geprueft = self.cleaned_data['schließfach_geprueft'],
        tuerchip_abgegeben = self.cleaned_data['tuerchip_abgegeben'],
        tuerschild_abgegeben = self.cleaned_data['tuerschild_abgegeben'],
        namensschild_abgegeben = self.cleaned_data['namensschild_abgegeben'],
        versicherung_abgemeldet = self.cleaned_data['versicherung_abgemeldet'],
        fachkonverenz_ausgetragen = self.cleaned_data['fachkonverenz_ausgetragen'],
        email_verteilerlisten_entfernt = self.cleaned_data['email_verteilerlisten_entfernt'],
        dauerbuchung_geloescht = self.cleaned_data['dauerbuchung_geloescht'],
        Staatspruefungstermine_eingetragen = self.cleaned_data['Staatspruefungstermine_eingetragen'],
        Fiona_auf_beendet = self.cleaned_data['Fiona_auf_beendet'],
        festplatte_geloescht = self.cleaned_data['festplatte_geloescht'],
        pc_account_deaktiviert = self.cleaned_data['pc_account_deaktiviert'],
        pia_zugang_deaktiviert = self.cleaned_data['pia_zugang_deaktiviert'],
        email_gelöscht = self.cleaned_data['email_gelöscht']
    )
    return post


    ['user','name', 'schriftlichepruefung', 'muendlichepruefung', 'akten_abgegeben', 'therapeutenornder_fertiggestellt',
        'vorname','festplatte_abgegeben','schluessel_abgegeben','schließfach_geprueft','tuerchip_abgegeben',
        'tuerschild_abgegeben','namensschild_abgegeben','versicherung_abgemeldet','fachkonverenz_ausgetragen',
        'email_verteilerlisten_entfernt','dauerbuchung_geloescht','Staatspruefungstermine_eingetragen','Fiona_auf_beendet',
        'festplatte_geloescht','pc_account_deaktiviert','pia_zugang_deaktiviert','email_gelöscht']


def create(request):
    if request.method == 'POST':
            f = CreateAusstiegAbmulanz(request.POST, request.user)
            if f.is_valid():
                user=request.user
                f.save(user)
                messages.success(request, 'Post is saved!')
                return redirect('home')
    else:
        current_user = User.objects.all().values().get(username=request.user.username)
        f = CreateAusstiegAbmulanz()
        context = {
            'current_user':current_user, 'form':f
        }
        return render(request, 'main/create.html', context)


        <header class="fixed-postion">
            <div class="d-flex justify-content-between">
                <ul>
                    <a class="navbar-brand text-decoration-none fs-3 text-black text-uppercase m-0" href="{% url 'home' %}">Five Survey</a>
                </ul>
                <ul>
                    <button type="button" class="btn btn-primary" onclick="location.href = '/create'">Erstelle Austieg aus der Ambulanz</button>
                    <button type="button" class="btn btn-success" onclick="location.href = '/feed'">Feed</button>    
                </ul>
                <ul class="nav col-12 col-md-auto mb-2 mb-md-0">
                    <!--<li><a href="{% url 'home' %}" class="nav-link px-2 link-secondary">Place holder</a></li>-->
                    {% if not user.is_authenticated %}
                    <div class="col-md-2 text-end hstack gap-3">
                        <a href="{% url 'login' %}" class="btn btn-sm btn-primary btn-lg" tabindex="-1" role="button" aria-disabled="true">Login</a>
                    </div>
                    {% endif %}
                    {% if user.is_authenticated %}
                    <div class="col-md-2 text-end hstack gap-3">
                        <a href="{% url 'logout' %}" class="btn btn-sm btn-secondary btn-lg" tabindex="-1" role="button" aria-disabled="true">Logout</a>
                    </div>
                    {% endif %}             
                </ul>
            </div>
        </header>

<div style="padding-top: 85px; height: calc(100% - 85px);">
    {% block content %}
        
    {% endblock %}
</div>